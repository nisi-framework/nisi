function [ Filtered_Data ] = filter_r_fir_NISI(Input_Data,FIR_Config,...    FIR_Runs,Timestep_Reduction,fcHandle)% Finite-Impulse-Response Filter%% Ursprungsversion von% Ulf Fuchs%% Modified:% Fabian Hufgard%% modification for multiWaitbar + include Timestep_Reduction% % Waitbar settings[nameMWB] = multiWaitbarControl('FIR','','','','','','',fcHandle);kk=0;        %--------------------------------------------------------------------------%Finite-Impulse-Response Filter%--------------------------------------------------------------------------%Low-pass filter construction algorithm:%FIR_Config equals M/2 -> half the order of the FIR filterFilter(FIR_Config + 1)                    = 2 * FIR_Config + 1; Filter(1:FIR_Config)                      = 1;Filter(FIR_Config + 2:2 * FIR_Config + 1) = 1; F_Size = length(Filter(:));Filter = Filter/sum(Filter);bufferFIR = Input_Data;for i = 1:FIR_Runs    Mirror(1:F_Size)                              = 0;    Mirror(F_Size + 1:F_Size + length(bufferFIR)) = bufferFIR(:);    Mirror(F_Size + length(bufferFIR) + 1: ...                    2*F_Size + length(bufferFIR)) = bufferFIR(end);    bufferFIR = conv(Filter,Mirror);    bufferFIR = bufferFIR(F_Size + FIR_Config + 1:end - F_Size - FIR_Config);    clear Mirror        if i/FIR_Runs>kk        multiWaitbar( nameMWB , i/FIR_Runs);        kk=kk+0.02; % +0.02 -> Jedes zweite Prozent wird geupdated    endendmultiWaitbar( nameMWB , 1);% ReductionFiltered_Data = bufferFIR(1,1:Timestep_Reduction:end);clear  i Filter F_Size FIR_Runs FIR_Config bufferFIRend