function [Numerator_Order_Vector,Numerator_Parameter_Vector, ...          Denominator_Order_Vector,Denominator_Parameter_Vector, ...          Error_Numerator_Vector, Error_Denominator_Vector, ...          Simulated_Temperature_Vector ] =  ...          nl_ident(Time,B2,B3,B4,B5,B6,B7,B8, ...          Calibration_Temperature,Calibration_Heat_Flux)%% This module contains the identification procedure %  Concerning its function it is a slimmed down version of the%  identification_module function  Delta_t                         = abs(Time(2) - Time(1)); % Global Delta_t setting!!!Dirac_Impulse(1:length(Calibration_Temperature),1) = 0; % Creating numerical Dirac_Impulse(2,1)                                 = 1; % Dirac-Impulseif B5 == 0 || ~B2;   Numerator_Grid = B7;else  [Numerator_Grid(1,:)] = parameter_conf(B5,B3);   Numerator_Grid(2,:)  = 0;   for i = 1:length(B7(1,:))      [~, Position] = find(Numerator_Grid(1,:) == B7(1,i));      if ~isempty(Position)          Numerator_Grid(2,Position) = B7(2,i);       end   endend      if B6 == 0 ||~B2;    Denominator_Grid = B8;else                 [Denominator_Grid(1,:)] = parameter_conf(B6,B4);    Denominator_Grid(2,:)  = 0;    for i = 1:length(B8(1,:))      [~, Position] = find(Denominator_Grid(1,:) == B8(1,i));      if ~isempty(Position)          Denominator_Grid(2,Position) = B8(2,i);       end    end        end  clear B5 B6 B7 B8 Discard Position   if B2  %Flag for automatic parameter derivate association    filepath = ['./Code/Automatic_Parameters/distribution' num2str(B3) '.mat'] ;   load(filepath);            Numerator_Distribution  = distrib;   clear distrib filepath       filepath = ['./Code/Automatic_Parameters/distribution' num2str(B4) '.mat'] ;   load(filepath);            Denominator_Distribution = distrib;   clear distrib filepath           percentPerRun = 100/(length(Calibration_Temperature(:,1,1)) ^ 2 * ...                         (length(Numerator_Distribution(:,1)) * ...                          length(Denominator_Distribution(:,1))));    percentDone    = 0;    Theta(1:length(Numerator_Distribution(:,1)) *   ...           length(Denominator_Distribution(:,1)))  = 0;   h = waitbar(0,'','Name','Automatic Parameter Selection'); % intitialize waitbar   end   for i = 1:length(Calibration_Temperature(:,1,1))   for j = 1:length(Calibration_Temperature(:,1,1))      clear Transfer_Heat_Flux Transfer_Temperature Temperature_Derivatives Heat_Flux_Derivatives       Transfer_Heat_Flux(:,1)    = Calibration_Heat_Flux(i,j,:);   Transfer_Temperature(:,1)  = Calibration_Temperature(i,j,:);         Temperature_Derivatives    = derivative(Transfer_Temperature, Denominator_Grid, ...                                           Delta_t);   Heat_Flux_Derivatives      = derivative(Transfer_Heat_Flux, Numerator_Grid, ...                                           Delta_t);        if ~B2  %Flag for automatic parameter derivate association                  [Numerator_Order,Numerator_Parameter,Denominator_Order, ...        Denominator_Parameter,Error_Numerator,Error_Denominator] ...        = system_identification(Heat_Flux_Derivatives,Temperature_Derivatives, ...                               Numerator_Grid,Denominator_Grid);              [Simulated_Temperature] = simulation_system( ...                                 Numerator_Parameter, ...                                 Denominator_Parameter,Denominator_Order, ...                                 Delta_t,Transfer_Heat_Flux,Heat_Flux_Derivatives);               else              for n = 1:length(Numerator_Distribution(:,1))                       clear Local_Numerator_Grid Transfer_Q_Derivatives Position         [Position]              = find(Numerator_Distribution(n,:));          for m = 1:length(Position)          Transfer_Q_Derivatives(:,m) =  Heat_Flux_Derivatives(:,Position(m));          end          for Generic_Counter = 1:length(Position)              Local_Numerator_Grid(:,Generic_Counter) = ...              Numerator_Grid(:,Position(Generic_Counter));          end                        for d = 1:length(Denominator_Distribution(:,1))            %-------------------------------------------------------------            % Constructor of the d_o matrix for system identification             % for the specific nominator distribution            %-------------------------------------------------------------                          clear Local_Denominator_Grid Transfer_T_Derivatives Position            [Position]             = find(Denominator_Distribution(d,:));             for m = 1:length(Position)            Transfer_T_Derivatives(:,m) =  Temperature_Derivatives(:,Position(m));            end            for Generic_Counter = 1:length(Position)                Local_Denominator_Grid(:,Generic_Counter) = ...                Denominator_Grid(:,Position(Generic_Counter));            end            clear Position Generic_Counter                   [~,Numerator_Parameter,Denominator_Order, ...             Denominator_Parameter,~,~] ...             = system_identification(Transfer_Q_Derivatives,Transfer_T_Derivatives, ...                                     Local_Numerator_Grid, Local_Denominator_Grid);                   [Simulated_Temperature] = simulation_system( ...                                      Numerator_Parameter, ...                                      Denominator_Parameter,Denominator_Order, ...                                      Delta_t,Transfer_Heat_Flux,Transfer_Q_Derivatives);                           %----------------------------------------------------------------            % L2-Error for the given system            %----------------------------------------------------------------            Theta((n-1) * length(Denominator_Distribution(:,1)) + d) = ...            sum((Simulated_Temperature - Transfer_Temperature).^2);                                percentDone = percentDone + percentPerRun;            waitbar(current_Timestep /...                   (length(Calibration_Temperature(:,1,1)) ^ 2 * ...                    length(Numerator_Distribution(:,1)) * ...                    length(Denominator_Distribution(:,1))),...                    h,sprintf('Progress: %12.1f %% Done',percentDone))           end               end           %----------------------------------------------------------------      % Selecting best fit and port      %----------------------------------------------------------------      [~, Position] = min(Theta);       Denominator_Index   = mod(Position,length(Denominator_Distribution(:,1)));        if Denominator_Index == 0           Denominator_Index = length(Denominator_Distribution(:,1));       end       Numerator_Index     = (Position - Denominator_Index) / ...                                length(Denominator_Distribution(:,1))+1;                           clear Local_Numerator_Grid Local_Denominator_Grid Transfer_Q_Derivatives      [Position] = find(Numerator_Distribution(Numerator_Index,:));         for m = 1:length(Position)       Transfer_Q_Derivatives(:,m) =  Heat_Flux_Derivatives(:,Position(m));       end       for Generic_Counter = 1:length(Position)           Local_Numerator_Grid(:,Generic_Counter) = ...           Numerator_Grid(:,Position(Generic_Counter));       end       clear Transfer_T_Derivatives       [Position] = find(Denominator_Distribution(Denominator_Index,:));        for m = 1:length(Position)       Transfer_T_Derivatives(:,m) =  Temperature_Derivatives(:,Position(m));       end       for Generic_Counter = 1:length(Position)           Local_Denominator_Grid(:,Generic_Counter) = ...           Denominator_Grid(:,Position(Generic_Counter));       end                                                             [Numerator_Order,Numerator_Parameter,Denominator_Order, ...       Denominator_Parameter,Error_Numerator,Error_Denominator] ...       = system_identification(Transfer_Q_Derivatives,Transfer_T_Derivatives, ...                              Local_Numerator_Grid, Local_Denominator_Grid);      [Simulated_Temperature] = simulation_system( ...                                Numerator_Parameter, Denominator_Parameter, ...                                Denominator_Order, Delta_t,Transfer_Heat_Flux, ...                                Transfer_Q_Derivatives);                               clear Discard Position Nominator_Index Denominator_Index         clear Local_Numerator_Grid Local_Denominator_Grid Generic_Counter            end      %--------------------------------------------------------------------      % Integrating equated parameters into the main program data structure      %--------------------------------------------------------------------      Numerator_Order_Vector{i,j}         = Numerator_Order;      Numerator_Parameter_Vector{i,j}     = Numerator_Parameter;      Denominator_Order_Vector{i,j}       = Denominator_Order;      Denominator_Parameter_Vector{i,j}   = Denominator_Parameter;      Error_Numerator_Vector{i,j}         = Error_Numerator;      Error_Denominator_Vector{i,j}       = Error_Denominator;      Simulated_Temperature_Vector(i,j,:) = Simulated_Temperature;            clear Numerator_Order Numerator_Parameter Denominator_Order       clear Denominator_Parameter Error_Nominator Error_Denominator      clear Response           endenddelete(h)end   