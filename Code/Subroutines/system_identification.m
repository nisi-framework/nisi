function [Numerator_Order,Numerator_Parameter,Denominator_Order, ...          Denominator_Parameter, Error_Numerator, Error_Denominator ] = ...          system_identification( Heat_Flux_Derivatives, Temperature_Derivatives, ...                                 Numerator_Grid, Denominator_Grid, plotWaitbar)%% Setup of local variablesNumerator_Order           = Numerator_Grid(1,:);Denominator_Order         = Denominator_Grid(1,:);Numerator_Order_Unknown   = find(Numerator_Grid(2,:)==0);Numerator_Order_Known     = find(Numerator_Grid(2,:)~=0);Denominator_Order_Unknown = find(Denominator_Grid(2,:)==0);Denominator_Order_Known   = find(Denominator_Grid(2,:)~=0);Parameter_Amount_Unknown  = length(Denominator_Order_Unknown) + ...                            length(Numerator_Order_Unknown);   %% Setup Linear System: %--------------------------------------------------------------------------% The Algorithm solves the basic system given by the formula% ?_0^i {?_n D^{n/2} T} = ?_0^j {?_n D^{n/2} Q}%% If no parameter is given, this creates the linear system:% A*parameter = 0%% Given parameters create the solution vector B:% A*parameter = B%--------------------------------------------------------------------------A = [ -Temperature_Derivatives(:,Denominator_Order_Unknown) ...       Heat_Flux_Derivatives(:,Numerator_Order_Unknown)];     B  = [  Temperature_Derivatives(:,Denominator_Order_Known) ...       -Heat_Flux_Derivatives(:,Numerator_Order_Known)] *  ...       [Denominator_Grid(2,Denominator_Order_Known) ...        Numerator_Grid(2,Numerator_Order_Known)]';    %% Waitbar DefinitionsrMrr  = 0;    % Reduce Multiwaitbar Refresh Rateif length(Heat_Flux_Derivatives(:,1)) > 100000    rMrrIncr = 0.01;    % Increment of Reduction of Multiwaitbar Refresh Rateelseif length(Heat_Flux_Derivatives(:,1)) > 50000    rMrrIncr = 0.1;     % Increment of Reduction of Multiwaitbar Refresh Rateelse    rMrrIncr = 1;       % Increment of Reduction of Multiwaitbar Refresh Rateendif ~exist('plotWaitbar','var')    plotWaitbar = 0;end%% Recursive Least Squares Algorithm    %--------------------------------------------------------------------------% e == Prediction error% k == Kalman Amplification% c == Inverse correlation matrix%--------------------------------------------------------------------------c                         = eye(Parameter_Amount_Unknown)*100000;Parameter                 = ones(Parameter_Amount_Unknown,1)*eps;for i = 1:length(Heat_Flux_Derivatives(:,1))-1  e   = B(i) - A(i,:)*Parameter;  buf = c * A(i,:)';  k   = buf / ( 1 + A(i,:) * buf );  c   = c - k * A(i,:) * c;                            Parameter = Parameter + k * e;   progress = i/(length(Heat_Flux_Derivatives(:,1))-1);  % progress increases from 0 to 1  if progress > rMrr && plotWaitbar      multiWaitbar('System Identification',progress);      rMrr=rMrr+rMrrIncr;                                      % with kk the output rate is reduced  endendif plotWaitbar      multiWaitbar('System Identification',1);end%% Output Denominator_Parameter(Denominator_Order_Known)   = Denominator_Grid(2,Denominator_Order_Known);Denominator_Parameter(Denominator_Order_Unknown) = Parameter(1:length(Denominator_Order_Unknown));Numerator_Parameter(Numerator_Order_Known)       = Numerator_Grid(2,Numerator_Order_Known);Numerator_Parameter(Numerator_Order_Unknown)     = Parameter(length(Denominator_Order_Unknown)+1:end);Error_Parameter                                  = sqrt(diag(c));Error_Denominator(Denominator_Order_Known)       = 0;Error_Denominator(Denominator_Order_Unknown)     = Error_Parameter(1:length(Denominator_Order_Unknown));Error_Numerator(Numerator_Order_Known)           = 0;Error_Numerator(Numerator_Order_Unknown)         = Error_Parameter(length(Denominator_Order_Unknown)+1:end);end