function [] = configconvert(oldconfigname)
% This script converts Config files from old formats (NISI verision V1 (output A0 to C5) and 
% V2 (output A0 to F0)) to the new V3.2 format (including NL parameters and Dummy variables) 
% 
% Origional version by
% Fabian Hufgard
%
% Modified by
% Stefan Löhle: Change of the script AAA_Convert_Config_V1_to_V31 in a
% function to call directly
% Fabian Hufgard: Changed to convert to Version 3.2
% 
% INPUT 
%       Config file NISI version V1 - defined in settings
% 
% OUTPUT
%       Config file NISI version V3.2
% 

clearvars -except oldconfigname; 

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%% Settings %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Name convention
nameDataset = oldconfigname;


nameConfigOld = [ 'Config_' nameDataset  ];    %Create full config file name string from the particular handle
configLoadHandle = str2func(nameConfigOld);    %Create function handle from name string
nameConfigNew = [ nameDataset '_Config' ];     % NOTE: A CONFIG FILE NAME CANNOT START WITH A NUMBER - 
    if strcmp(nameConfigNew(1:2),'1D')         % THE 1D... FILES WILL BE RENAMED TO D1...
        nameConfigNew = ['D1' nameConfigNew(3:end)]; 
    end            

 
% Path definitions
load pfade.mat
pathConfigOld = ([pathNisiFolder, 'Configuration\Pre_NISI_V3_Configs\']);
pathConfigNew = ([pathNisiFolder, 'Configuration\']);




%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%% Program %%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-------------------------------------------------------
% Load old config file 
%-------------------------------------------------------
cd(pathConfigOld)        % Navigate to folder containing old config files

[ A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,C1,C2,C3,C4,C5 ] = configLoadHandle();
     
 Calibration_Dataset  = A0 ;
 Measurement_Dataset  = A1 ;
 Measurement_Source   = A2 ;
 Pre_Calc_Calibration = A3 ;
 Pre_Calc_Measurement = A4 ;
 Separate_Source      = A5 ;
 Pulse_Response       = A6 ;
 Sensor               = A7 ;
 Penetration_Time     = A8 ;
 Future_Time_Window   = A9 ;
 Timestep_Reduction   = B0 ;
 Temperature_Zero     = B1 ;
 Auto_Param_Finder    = B2 ;
 Max_Parameter_n_o    = B3 ;
 Max_Parameter_d_o    = B4 ;
 Parameter_Config_n   = B5 ;
 Parameter_Config_d   = B6 ;
 Manual_n_o           = B7 ;
 Manual_d_o           = B8 ;
 Filter_Config        = B9 ;
 Cut_Off_Frequency    = C1 ;
 FIR_Config           = C2 ;
 FIR_Runs             = C3 ;
 Plot_Configuration   = C4 ;
 Solver_Configuration = C5 ;

clear A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 B0 B1 B2 B3 B4 B5 B6 B7 B8 B9 C1 C2 C3 C4 C5

%-------------------------------------------------------
% Create Manual_d_o and Manual_n_o strings
%-------------------------------------------------------

strManual_n_o1='';
strManual_n_o2='';									   % In every loop: add a value of the Manual_n_o 
for i=1:length(Manual_n_o(1,:))                       % vector as a str to the str variable (strManual_n_o1)
    bufferStr1=num2str(Manual_n_o(1,i));               % eventually strManual_n_o1 is the str to be written
    strManual_n_o1 = [strManual_n_o1 bufferStr1 '  ']; % into the created config file
    bufferStr2=num2str(Manual_n_o(2,i));               
    bufferStr2 = pad(bufferStr2,strlength(bufferStr1));%<--equalize both lengths
    strManual_n_o2 = [ strManual_n_o2 bufferStr2 '  '];
    clear bufferStr1 bufferStr2
end

strManual_d_o1='';
strManual_d_o2='';
for j=1:length(Manual_d_o(1,:))                        %similar to Manual_n_o
    bufferStr1=num2str(Manual_d_o(1,j));
    strManual_d_o1 = [strManual_d_o1 bufferStr1 '  '];
    bufferStr2=num2str(Manual_d_o(2,j));
    bufferStr2 = pad(bufferStr2,strlength(bufferStr1));
    strManual_d_o2 = [strManual_d_o2 bufferStr2 '  '];
    clear bufferStr1 bufferStr2
end
clear i j

%-------------------------------------------------------
% Write new file
%-------------------------------------------------------
cd(pathConfigNew)        % Navigate to folder containing new config files

fileID = fopen([nameConfigNew '.m'],'w');          %create new config file


fprintf(fileID,[''...
'function [ nameCalFolder        , ...\n' ...
'           nameMeasFolder       , ...\n' ...
'           Frequency_Analysis   , ...\n' ...
'           Pre_Calc_Calibration , ...\n' ...
'           Pre_Calc_Measurement , ...\n' ...
'           Sensor               , ...\n' ...
'           Penetration_Time     , ...\n' ...
'           Future_Time_Window   , ...\n' ...
'           Timestep_Reduction   , ...\n' ...
'           Temperature_Zero     , ...\n' ...
'           Auto_Param_Finder    , ...\n' ...
'           Max_Parameter_n_o    , ...\n' ...
'           Max_Parameter_d_o    , ...\n' ...
'           Parameter_Config_n   , ...\n' ...
'           Parameter_Config_d   , ...\n' ...
'           Manual_n_o           , ...\n' ...
'           Manual_d_o           , ...\n' ...
'           Filter_Config        , ...\n' ...
'           Cut_Off_Frequency    , ...\n' ...
'           FIR_Config           , ...\n' ...
'           FIR_Runs             , ...\n' ...
'           Plot_Configuration   , ...\n' ...
'           Solver_Configuration , ...\n' ...
'           analyzeIR            , ...\n' ...
'           parameterFile        , ...\n' ...
'           flagNL               , ...\n' ...
'           currentTemp          , ...\n' ...
'           pastTemps            , ...\n' ...
'           chemieIdentifikation , ...\n' ...
'           chemieSolver         , ...\n' ...
'           P1,P2,P3,P4,P5       , ...\n' ...
'           P6,P7,P8,P9,P10    ] = ...\n' ...
'           ' nameConfigNew '()\n' ...
'              %%  /\\ To be adjusted for each configuration\n' ...
'\n' ...			  
'\n' ...	  
'%%%% Path Configuration\n' ...
'nameCalFolder    = ''InsertCalibrationFolderHere''; %% <- Calibration data are supposed to be located in separate calibration folder\n' ...
'nameMeasFolder   = ''' Measurement_Source '''; %%Handle to identify different measurements in one folder\n' ...
'parameterFile    = '''' ; %%z.b. \\HENDERSON_PYRAMIDE\\NISI_HENDERSON_PYRAMIDE_Parameter_var_T.mat;     \n' ...
'\n' ...
'%%%% Program Control:                                                                         \n' ...
'Frequency_Analysis  = false ;   %%Activates Frequency Domain Visualisation                    \n' ...
'analyzeIR           = false ;   %%|Suppresses inversion for faster calculation;               \n' ...
'                                %%|Additionally plots temperatur difference                   \n' ...
'                                %%|between Simulated vs. Calibration Temperature              \n' ... 
'\n' ...
'flagNL                = false ; %%Calculation of nonlinear System Impulse Response            \n' ... 
'currentTemp           = false ; %%Calculation with Impulse Response of current Temperature    \n' ... 
'pastTemps             = false ; %%Calculation with Impulse Responses of past Time steps       \n' ... 
'\n' ...
'chemieIdentifikation  = false ; %%Activates chemical terms in identification                  \n' ... 
'chemieSolver          = false ; %%Activates Chemical solver                                   \n' ... 
'\n' ...
'%%%% Program Configuration                                                                    \n' ...
'\n' ...
'Pre_Calc_Calibration  = ' num2str(Pre_Calc_Calibration) ' ; %%|Perform input data calculations \n' ...
'Pre_Calc_Measurement  = ' num2str(Pre_Calc_Measurement) ' ; %%|>> Filters and reduction etc    \n' ...
'                                                                                              \n' ...
'                                                                                              \n' ...
'Sensor             = [ ' num2str(Sensor(1)) '    %% |Analyse a specific sensor / surface      \n' ...
'                       ' num2str(Sensor(2)) ' ]; %% |combination                              \n' ...
'Penetration_Time   = ' num2str(Penetration_Time) ';  %% |Thermal penetration time in s                              \n' ...
'Future_Time_Window = ' num2str(Future_Time_Window) ';  %% |Width in s of the analysation window counting from       \n' ...
'                            %% |Penetration_Time , if =0 -> Only the timestep                 \n' ...
'                            %% |at Penetrationtime + 1*timestep is considered                 \n' ...
'Timestep_Reduction = ' num2str(Timestep_Reduction) '  ; %% |Only every Timestep_Reduction timestep is used          \n' ...
'Temperature_Zero   = ' num2str(Temperature_Zero) '  ; %% Time in s used to equate zero level temperature            \n' ...
'Auto_Param_Finder  = ' num2str(Auto_Param_Finder) '    ; %% Activation of the automatic parameter finder            \n' ...
'Max_Parameter_n_o  = ' num2str(Max_Parameter_n_o) '    ; %% Amount of Parameters checked for viability              \n' ...
'Max_Parameter_d_o  = ' num2str(Max_Parameter_d_o) '    ; %% Amount of Parameters checked for viability              \n' ...
'Parameter_Config_n = ' num2str(Parameter_Config_n) '    ; %% |Configuration of the used parameters of the transfer  \n' ...
'Parameter_Config_d = ' num2str(Parameter_Config_d) '    ; %% |function -> 1 == D^(j/2) standard derivatives row     \n' ...
'                            %% |For other configurations look @              \n' ...
'                            %% |<NISIPath>/Code/Subroutines/parameter_conf.m \n' ...
'%%-------------------------------------------------------------------------- \n' ...
'%%Parameters for identification of the transfer function if                  \n' ...
'%%Auto_Param-Finder = false                                                  \n' ...
'%%First row defines the used derivatives                                     \n' ...
'%%Second row  = 0 >> Parameter defined by least squares algorithm            \n' ...
'%%Second row ~= 0 >> Parameter is fixed on the given value                   \n' ...
'%%-------------------------------------------------------------------------- \n' ...
'                                          \n' ...
'%%Flux Terms                              \n' ...
'Manual_n_o =   [  ' strManual_n_o1 '      \n' ...
'                  ' strManual_n_o2 ' ] ;  \n' ...
'\n' ...
'\n' ...
'%% Temperature Terms                      \n' ...
'Manual_d_o =   [  ' strManual_d_o1 '      \n' ...
'                  ' strManual_d_o2 ' ] ;  \n' ...
'\n' ...
'\n' ...
'%%%% Filter Configuration \n' ...
'\n' ...
'Filter_Config = [ ' num2str(Filter_Config(1)) '    %% Calibration Temperature Data  | 0 >>> No Filter            \n' ...
'                  ' num2str(Filter_Config(2)) '    %% Calibration Heat Flux Data    | 1 >>> FIR Filter           \n' ...
'                  ' num2str(Filter_Config(3)) '    %% Measurement Temperature Data  | 2 >>> Running Gauss Filter \n' ...
'                  ' num2str(Filter_Config(4)) '    %% Impulse Response              | 3 >>> RGF + FIR            \n' ...
'                  ' num2str(Filter_Config(5)) ' ]; %% Inverted Heat Flux            | 4 >>> FIR + RGF            \n' ...
'                       %%                               | 5 >>> Reduction  \n' ...
'                       %%                               | 7 >>> Sharp Edge Filter (for NISI pulses) \n' ...
'\n' ...
'%%Gauss-Filter Frequencies: \n' ...
'Cut_Off_Frequency = [ ' num2str(Cut_Off_Frequency(1)) '    %%Gauss-Filter cut off frequency (Hz) |Calibration T  \n' ...
'                      ' num2str(Cut_Off_Frequency(2)) '    %%Gauss-Filter cut off frequency (Hz) |Calibration Q  \n' ...
'                      ' num2str(Cut_Off_Frequency(3)) '    %%Gauss-Filter cut off frequency (Hz) |Measurement T  \n' ...
'                      ' num2str(Cut_Off_Frequency(4)) '    %%Gauss-Filter cut off frequency (Hz) |Pulse Resp.    \n' ...
'                      ' num2str(Cut_Off_Frequency(5)) ' ]; %%Gauss-Filter cut off frequency (Hz) |generic        \n' ...
'\n' ...
'%%FIR-Filter:                                                                   \n' ...
'%%See <NISIPath>/Code/Subroutines/filter_r_fir.m for configuration types        \n' ...
'FIR_Config    = [ ' num2str(FIR_Config(1)) '    %% Calibration Temperature Data \n' ...
'                  ' num2str(FIR_Config(2)) '    %% Calibration Heat Flux Data   \n' ...
'                  ' num2str(FIR_Config(3)) '    %% Measurement Temperature Data \n' ...
'                  ' num2str(FIR_Config(4)) '    %% Impulse Response             \n' ...
'                  ' num2str(FIR_Config(5)) ' ]; %% Inverted Heat Flux           \n' ...
'\n' ...
'FIR_Runs      = [ ' num2str(FIR_Runs(1)) '    %% Calibration Temperature Data   \n' ...
'                  ' num2str(FIR_Runs(2)) '    %% Calibration Heat Flux Data     \n' ...
'                  ' num2str(FIR_Runs(3)) '    %% Measurement Temperature Data   \n' ...
'                  ' num2str(FIR_Runs(4)) '    %% Impulse Response               \n' ...
'                  ' num2str(FIR_Runs(5)) ' ]; %% Inverted Heat Flux             \n' ...
'\n' ...
'%%%% Plot Configuration                                                                         \n' ...
'                       %% C  M    %% Column 1 of Plot_Configuration for Calib, 2 for Meas       \n' ...
'Plot_Configuration   = [ 1  0    %% Calibration/Simulation Temperature    |Manual configuration \n' ...
'                         1  0    %% Calibration/Inverted Heat Flux        |of plots             \n' ...
'                         0  1    %% Measurement Heat Flux (Inverted)      |0 - deactivated      \n' ...
'                         1  1    %% Impulse Response                      |1 - activated        \n' ...
'                         0  0    %% FFT - Calibration Temperature                               \n' ...
'                         0  0    %% FFT - Calibration Heat Flux                                 \n' ...
'                         0  0    %% FFT - Measurement Temperature                               \n' ...
'                         0  0    %% FFT - Inverted Heat Flux                                    \n' ...
'                         0  0 ]; %% FFT - Impulse Response                                      \n' ...
'\n' ...
'%%%% Solver Configuration                                                                       \n' ...
'Solver_Configuration = ' num2str(Solver_Configuration) ';        %% 0 - phased Van Cittert      \n' ...
'                                 %% 1 - sequential function estimation                          \n' ...
'\n' ...
'%%%% Dummy variables for future use \n' ...
'P1 = '''';                          \n' ...
'P2 = '''';                          \n' ...
'P3 = '''';                          \n' ...
'P4 = '''';                          \n' ...
'P5 = '''';                          \n' ...
'P6 = '''';                          \n' ...
'P7 = '''';                          \n' ...
'P8 = '''';                          \n' ...
'P9 = '''';                          \n' ...
'P10= '''';                          \n' ...
'end']);
open(nameConfigNew);