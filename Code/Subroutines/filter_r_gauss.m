function [ Filtered_Data ] = filter_r_gauss(Input_Data,f_cutoff,...    Delta_t,Timestep_Reduction,fcHandle)% Filter with a gauss shaped weighting function %% Ursprungsversion von% Ulf Fuchs%% Modified:% Fabian Hufgard%% modification to only use every Timestep_Reduction th timestep for the% filter -> speed increase% % Waitbar settings[nameMWB] = multiWaitbarControl('Gauss','','','','','','',fcHandle);kk=0;%--------------------------------------------------------------------% Running Gauss Filter%-------------------------------------------------------------------                e  = 2.718281828459045235;Angular_Velocity   = 2 * pi * f_cutoff;Integral_Intensity = sum(Input_Data(1:Timestep_Reduction:end));Window             = double(int32(( (5/Angular_Velocity) / Delta_t) + 0.5 ));Operator           = - (Angular_Velocity * Delta_t)^2;Mirror(1:Window)                                = 0; Mirror(Window + 1: Window + length(Input_Data)) = Input_Data(:);                           Mirror(Window + length(Input_Data) + 1: ...               2 * Window + length(Input_Data)) = Input_Data(end);bufferGauss(1:length(Input_Data))               = 0;for i = 1 + Window:Timestep_Reduction:length(Mirror) - Window % Only every Timestep_Reduction th timestep is processed in the filter, since the other timesteps are going to be cut away later anyways    Nominator   = 0;    Denominator = 0;        for j = - Window:Window       Exponent    = e^(Operator * (j^2));        Nominator   = Nominator   + Mirror(i+j) * Exponent;       Denominator = Denominator + Exponent^0.25;    end        bufferGauss(i-Window) = Nominator / Denominator;        if i/length(Input_Data)>kk        multiWaitbar( nameMWB , i/length(Input_Data));        kk=kk+0.02; % +0.02 -> Jedes zweite Prozent wird geupdated    endendmultiWaitbar( nameMWB , 1);% ReductionFiltered_Data            = bufferGauss(1:Timestep_Reduction:end);Filtered_Data            = Filtered_Data* Integral_Intensity / sum(Filtered_Data);clear e Angular_Velocity Integral_Intensity Mirror j i Window Input_Data clear Operator Exponent Denominator Nominator f_cutoff Delta_tend