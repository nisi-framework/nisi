function  [Output_Vector,Time] = filter_control(Input_Vector, ...           Delta_t,Handle,Sensor, Timestep_Reduction, ...            Temperature_Zero,Filter_Config,Cut_Off_Frequency,FIR_Config,FIR_Runs) %--------------------------------------------------------------------------% Zero leveling is always applied for 'Handle' 1/2/3  % >>> Calibration_Heat_Flux / Calibration_Temperature or _Pressure /% Msrmnt_Temperature or _Pressure%% Legit Filter_Config values:% 0 >>> no filter            | no timestep increase% 1 >>> FIR Filter           | timestep increase for 'Handle' 1/2/3% 2 >>> Running Gauss Filter | timestep increase for 'Handle' 1/2/3% 3 >>> RGF + FIR            | timestep increase for 'Handle' 1/2/3% 4 >>> FIR + RGF            | timestep increase for 'Handle' 1/2/3% 5 >>> Postprocess Inv HF%--------------------------------------------------------------------------    multiWaitbar( 'Filtering Input Data', 'Reset');switch Handle%% Filtering Measurement/Calibration Datacase {1,2} if Sensor(1) ~= 0 && Sensor(2) ~= 0    StepsZero                        = double(int32(Temperature_Zero / Delta_t));    Mean_Zero_Level              = sum(Input_Vector(Sensor(1),Sensor(2),1:StepsZero)) / StepsZero;    Input_Vector(Sensor(1),Sensor(2),:)  = Input_Vector(Sensor(1),Sensor(2),:) - Mean_Zero_Level;    Input_Vector(Sensor(1),Sensor(2),1:StepsZero) = 0;        switch Filter_Config(Handle)         case 0                       Output_Vector = Input_Vector;            Timestep_Reduction = 1; % <- no reduction (of time vector)                                case 1                         Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);                             [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);            Output_Vector(1,1,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                               case 2             Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction,Timestep_Reduction);            Output_Vector(1,1,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                    case 3            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1); % 1 because no timestepreduction here, but during fir run!            [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);                                               Output_Vector(1,1,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                    case 4            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);            [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);                                              Output_Vector(1,1,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                    case 5                         Output_Vector(1,1,:) = Input_Vector(Sensor(1),Sensor(2),1:Timestep_Reduction:end);                           end else % if Sensor(1) == 0 oder Sensor(2) == 0    StepsZero = double(int32(Temperature_Zero / Delta_t));    for i=1:length(Input_Vector(:,1,1))    for j=1:length(Input_Vector(1,:,1))        Mean_Zero_Level         = sum(Input_Vector(i,j,1:StepsZero)) / StepsZero;        Input_Vector(i,j,1:end) = Input_Vector(i,j,1:end) - Mean_Zero_Level;        Input_Vector(i,j,1:StepsZero) = 0;    end    end    switch Filter_Config(Handle)         case 0            Output_Vector = Input_Vector;            Timestep_Reduction = 1; % <- no reduction (of time vector)                               case 1                         for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                        Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);                                      Output_Vector(i,j,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced            end            end                                case 2             for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);               Output_Vector(i,j,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                           end            end                    case 3            for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);               [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1); % 1 because no timestepreduction here, but during fir run!                             [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);               Output_Vector(i,j,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                           end            end                    case 4            for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);               [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);                                                 Output_Vector(i,j,:) = Transfer_Vector(1,1:end); % Transfer_Vector is already reduced                           end            end                    case 5            Output_Vector(:,:,:) = Input_Vector(:,:,1:Timestep_Reduction:end);    end end % Create new reduced time vector (in every filter configuration for handle% = 1 or 2), but only for handle = 1, the time is extracted for i = 1:length(Output_Vector(1,1,:))    Time(i) = (i - 1) * Delta_t * Timestep_Reduction;end      %% Filtering Measurement Datacase 3    StepsZero                        = double(int32(Temperature_Zero / Delta_t));    if Sensor(1) ~= 0       Mean_Zero_Level         = sum(Input_Vector(Sensor(1),1:StepsZero)) / StepsZero;    Input_Vector(Sensor(1),:)   = Input_Vector(Sensor(1),:) - Mean_Zero_Level;    Input_Vector(Sensor(1),1:StepsZero) = 0;        switch Filter_Config(Handle)         case 0                       Output_Vector = Input_Vector;            Timestep_Reduction = 1; % <- no reduction (of time vector)                                case 1                         Transfer_Vector(1,:) = Input_Vector(Sensor(1),1:end);                             [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle));            Output_Vector(1,:) = Transfer_Vector(1,:);                               case 2             Transfer_Vector(1,:) = Input_Vector(Sensor(1),1:end);            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);            Output_Vector(1,:) = Transfer_Vector(1,:);                    case 3            Transfer_Vector(1,:) = Input_Vector(Sensor(1),1:end);            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1); % 1 because no timestepreduction here, but during fir run!            [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);                                                Output_Vector(1,:) = Transfer_Vector(1,:);                    case 4            Transfer_Vector(1,:) = Input_Vector(Sensor(1),1:end);            [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1); % 1 because no timestepreduction here, but during gauss run!            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);                                              Output_Vector(1,:) = Transfer_Vector(1,:);                    case 5                         Output_Vector(1,:) = Input_Vector(Sensor(1),1:Timestep_Reduction:end);                           end       else            for i=1:length(Input_Vector(:,1))        Mean_Zero_Level         = sum(Input_Vector(i,1:StepsZero)) / StepsZero;        Input_Vector(i,1:end)   = Input_Vector(i,1:end) - Mean_Zero_Level;    end        switch Filter_Config(Handle)         case 0            Output_Vector = Input_Vector;            Timestep_Reduction = 1; % <- no reduction (of time vector)                               case 1                         for i=1:length(Input_Vector(:,1))                              Transfer_Vector(1,:) = Input_Vector(i,:);                                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);               Output_Vector(i,:) = Transfer_Vector(1,1:end);            end                                          case 2             for i=1:length(Input_Vector(:,1))                           Transfer_Vector(1,:) = Input_Vector(i,:);                                [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);               Output_Vector(i,:) = Transfer_Vector(1,1:end);            end                    case 3            for i=1:length(Input_Vector(:,1))                           Transfer_Vector(1,:) = Input_Vector(i,:);               [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1); % 1 because no timestepreduction here, but during fir run!                             [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),Timestep_Reduction);               Output_Vector(i,:) = Transfer_Vector(1,1:end);            end                    case 4            for i=1:length(Input_Vector(:,1))                               Transfer_Vector(1,:) = Input_Vector(i,:);                                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1); % 1 because no timestepreduction here, but during gauss run!               [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,Timestep_Reduction);                                                 Output_Vector(i,:) = Transfer_Vector(1,1:end);            end                    case 5            Output_Vector(:,:) = Input_Vector(:,1:Timestep_Reduction:end);                    end        end    for i = 1:length(Transfer_Vector(1,:))        Time(i) = (i - 1) * Delta_t * Timestep_Reduction;    end  %% Filtering Impulse Response case 4if Sensor(1) ~= 0 && Sensor(2) ~= 0    switch Filter_Config(Handle)         case 0            Output_Vector = Input_Vector;                               case 1                            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);                             [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);            Output_Vector(Sensor(1),Sensor(2),:) = Transfer_Vector(1,:);                                   case 2            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);                         [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1);            Output_Vector(Sensor(1),Sensor(2),:) = Transfer_Vector(1,:);                       case 3            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);                         [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1); % 1 because no timestepreduction here, but during fir run!            [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);                                                Output_Vector(Sensor(1),Sensor(2),:) = Transfer_Vector(1,:);                               case 4            Transfer_Vector(1,:) = Input_Vector(Sensor(1),Sensor(2),:);                         [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1); % 1 because no timestepreduction here, but during gauss run!            [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1);                                              Output_Vector(Sensor(1),Sensor(2),:) = Transfer_Vector(1,:);                               case 5             Output_Vector(Sensor(1),Sensor(2),:) = Input_Vector(Sensor(1),Sensor(2),:);             warning('Data Reduction does not apply to the Impulse Response and has therefore been turned off. The Impulse Response needs to be the same length as the Temperature and Heat Flux Vector!');    end    else    switch Filter_Config(Handle)         case 0            Output_Vector = Input_Vector;                                case 1                        for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);               Output_Vector(i,j,:) = Transfer_Vector(1,:);                           end            end                                           case 2            for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                       Cut_Off_Frequency(Handle),Delta_t,1);               Output_Vector(i,j,:) = Transfer_Vector(1,:);                           end            end                                         case 3            for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                                [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                       Cut_Off_Frequency(Handle),Delta_t,1);               [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);                                                 Output_Vector(i,j,:) = Transfer_Vector(1,:);                           end            end                                          case 4            for i=1:length(Input_Vector(:,1,1))            for j=1:length(Input_Vector(1,:,1))                               Transfer_Vector(1,:) = Input_Vector(i,j,:);                [ Transfer_Vector ]  = filter_r_fir_NISI(Transfer_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);                              [ Transfer_Vector ]  = filter_r_gauss(Transfer_Vector, ...                                       Cut_Off_Frequency(Handle),Delta_t,1);                                                 Output_Vector(i,j,:) = Transfer_Vector(1,:);                           end            end                                         case 5             Output_Vector = Input_Vector;             warning('Data Reduction does not apply to the Impulse Response and has therefore been turned off. The Impulse Response needs to be the same length as the Temperature and Heat Flux Vector!');    end    endTime                 = '';%% Filtering Generic Input Vector <-> Inverted Heat Fluxcase 5    switch Filter_Config(Handle)         case 0            Output_Vector = Input_Vector;                    case 1                                                             [ Output_Vector]  = filter_r_fir_NISI(Input_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);              case 2              [ Output_Vector ] = filter_r_gauss(Input_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1);                                case 3             [ Output_Vector ] = filter_r_gauss(Input_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1);             [ Output_Vector]  = filter_r_fir_NISI(Output_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);                        case 4             [ Output_Vector]  = filter_r_fir_NISI(Input_Vector, ...                                      FIR_Config(Handle),FIR_Runs(Handle),1);                         [ Output_Vector ] = filter_r_gauss(Output_Vector, ...                                        Cut_Off_Frequency(Handle),Delta_t,1);                     case 5                        Output_Vector(:) = Input_Vector(1:Timestep_Reduction:end);                 end    Time          = '';end    % Update waitbar to 100%    multiWaitbar( 'Filtering Input Data', 'Reset');    multiWaitbar( 'Filtering Input Data', 1);end